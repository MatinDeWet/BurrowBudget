name: CI/CD Pipeline

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]

env:
  DOTNET_VERSION: '9.0.x'
  SOLUTION_FILE: 'BurrowBudget.sln'

jobs:
  # Stage 1: Code Quality & Linting
  # code-quality:
  #   name: Code Quality & Linting
  #   runs-on: ubuntu-latest
    
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4
      
  #   - name: Setup .NET
  #     uses: actions/setup-dotnet@v4
  #     with:
  #       dotnet-version: ${{ env.DOTNET_VERSION }}
        
  #   - name: Restore dependencies
  #     run: dotnet restore ${{ env.SOLUTION_FILE }}
      
  #   - name: Check code formatting
  #     run: dotnet format ${{ env.SOLUTION_FILE }} --verify-no-changes --verbosity diagnostic

  # Stage 2: Restore
  restore:
    name: Restore Dependencies
    runs-on: ubuntu-latest
    #needs: code-quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/Directory.Packages.props') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
        
    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_FILE }}

  # Stage 3: Build
  build:
    name: Build Solution
    runs-on: ubuntu-latest
    needs: restore
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore from cache
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/Directory.Packages.props') }}
        
    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_FILE }}
        
    - name: Build solution
      run: dotnet build ${{ env.SOLUTION_FILE }} --configuration Release --no-restore
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          **/bin/Release/
          **/obj/Release/
        retention-days: 1

  # Stage 4: Test Projects (Parallel Execution)
  test-domain-base:
    name: Test - Domain.Base
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_FILE }}
        
    - name: Run Domain.Base.UnitTests
      run: dotnet test Tests/Utilities/Domain.Base.UnitTests/Domain.Base.UnitTests.csproj --configuration Release --no-restore --logger trx --collect:"XPlat Code Coverage" --results-directory ./coverage/domain-base
      
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-domain-base
        path: ./coverage/domain-base/**/*.trx
        retention-days: 30
        
    - name: Upload coverage results
      uses: actions/upload-artifact@v4
      with:
        name: coverage-domain-base
        path: ./coverage/domain-base/**/coverage.cobertura.xml
        retention-days: 30

  test-identification:
    name: Test - Identification
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_FILE }}
        
    - name: Run Identification.UnitTests
      run: dotnet test Tests/Utilities/Identification.UnitTests/Identification.UnitTests.csproj --configuration Release --no-restore --logger trx --collect:"XPlat Code Coverage" --results-directory ./coverage/identification
      
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-identification
        path: ./coverage/identification/**/*.trx
        retention-days: 30
        
    - name: Upload coverage results
      uses: actions/upload-artifact@v4
      with:
        name: coverage-identification
        path: ./coverage/identification/**/coverage.cobertura.xml
        retention-days: 30

  test-pagination:
    name: Test - Pagination
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_FILE }}
        
    - name: Run Pagination.UnitTests
      run: dotnet test Tests/Utilities/Pagination.UnitTests/Pagination.UnitTests.csproj --configuration Release --no-restore --logger trx --collect:"XPlat Code Coverage" --results-directory ./coverage/pagination
      
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-pagination
        path: ./coverage/pagination/**/*.trx
        retention-days: 30
        
    - name: Upload coverage results
      uses: actions/upload-artifact@v4
      with:
        name: coverage-pagination
        path: ./coverage/pagination/**/coverage.cobertura.xml
        retention-days: 30

  test-repository:
    name: Test - Repository
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_FILE }}
        
    - name: Run Repository.UnitTests
      run: dotnet test Tests/Utilities/Repository.UnitTests/Repository.UnitTests.csproj --configuration Release --no-restore --logger trx --collect:"XPlat Code Coverage" --results-directory ./coverage/repository
      
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-repository
        path: ./coverage/repository/**/*.trx
        retention-days: 30
        
    - name: Upload coverage results
      uses: actions/upload-artifact@v4
      with:
        name: coverage-repository
        path: ./coverage/repository/**/coverage.cobertura.xml
        retention-days: 30

  test-searchable:
    name: Test - Searchable
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_FILE }}
        
    - name: Run Searchable.UnitTests
      run: dotnet test Tests/Utilities/Searchable.UnitTests/Searchable.UnitTests.csproj --configuration Release --no-restore --logger trx --collect:"XPlat Code Coverage" --results-directory ./coverage/searchable
      
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-searchable
        path: ./coverage/searchable/**/*.trx
        retention-days: 30
        
    - name: Upload coverage results
      uses: actions/upload-artifact@v4
      with:
        name: coverage-searchable
        path: ./coverage/searchable/**/coverage.cobertura.xml
        retention-days: 30

  test-webapi-architecture:
    name: Test - WebApi Architecture
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_FILE }}
        
    - name: Run WebApi.Architecture.UnitTests
      run: dotnet test Tests/Services/WebApi/WebApi.Architecture.UnitTests/WebApi.Architecture.UnitTests.csproj --configuration Release --no-restore --logger trx --collect:"XPlat Code Coverage" --results-directory ./coverage/webapi-architecture
      
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-webapi-architecture
        path: ./coverage/webapi-architecture/**/*.trx
        retention-days: 30
        
    - name: Upload coverage results
      uses: actions/upload-artifact@v4
      with:
        name: coverage-webapi-architecture
        path: ./coverage/webapi-architecture/**/coverage.cobertura.xml
        retention-days: 30

  test-webapi-infrastructure:
    name: Test - WebApi Infrastructure
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_FILE }}
        
    - name: Run WebApi.Infrastructure.UnitTests
      run: dotnet test Tests/Services/WebApi/WebApi.Infrastructure.UnitTests/WebApi.Infrastructure.UnitTests.csproj --configuration Release --no-restore --logger trx --collect:"XPlat Code Coverage" --results-directory ./coverage/webapi-infrastructure
      
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-webapi-infrastructure
        path: ./coverage/webapi-infrastructure/**/*.trx
        retention-days: 30
        
    - name: Upload coverage results
      uses: actions/upload-artifact@v4
      with:
        name: coverage-webapi-infrastructure
        path: ./coverage/webapi-infrastructure/**/coverage.cobertura.xml
        retention-days: 30

  # Stage 5: Code Coverage Report
  coverage-report:
    name: Generate Coverage Report
    runs-on: ubuntu-latest
    needs: 
      - test-domain-base
      - test-identification
      - test-pagination
      - test-repository
      - test-searchable
      - test-webapi-architecture
      - test-webapi-infrastructure
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all coverage artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: coverage-*
        path: ./coverage-results
        
    - name: Install ReportGenerator
      run: dotnet tool install -g dotnet-reportgenerator-globaltool
      
    - name: Generate combined coverage report
      run: |
        reportgenerator \
          -reports:"./coverage-results/**/coverage.cobertura.xml" \
          -targetdir:"./coverage-report" \
          -reporttypes:"HtmlInline_AzurePipelines;Cobertura;MarkdownSummaryGithub" \
          -assemblyfilters:"+*" \
          -classfilters:"-System.*;-Microsoft.*"
      
    - name: Upload combined coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: ./coverage-report
        retention-days: 30
        
    - name: Add coverage comment to PR
      if: github.event_name == 'pull_request'
      uses: marocchino/sticky-pull-request-comment@v2
      with:
        path: ./coverage-report/SummaryGithub.md
        
    - name: Write coverage to job summary
      if: always()
      run: cat ./coverage-report/SummaryGithub.md >> $GITHUB_STEP_SUMMARY

  # Stage 6: Docker Build (only on master)
  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: 
      - test-domain-base
      - test-identification
      - test-pagination
      - test-repository
      - test-searchable
      - test-webapi-architecture
      - test-webapi-infrastructure
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker images
      run: docker-compose build
      
    - name: Save Docker images as artifacts
      run: |
        docker save $(docker-compose config --services | xargs -I {} echo "burrowbudget-{}") -o docker-images.tar
        
    - name: Upload Docker images
      uses: actions/upload-artifact@v4
      with:
        name: docker-images
        path: docker-images.tar
        retention-days: 7

  # Final Stage: Pipeline Summary
  pipeline-summary:
    name: Pipeline Summary
    runs-on: ubuntu-latest
    needs:
      - code-quality
      - build
      - test-domain-base
      - test-identification
      - test-pagination
      - test-repository
      - test-searchable
      - test-webapi-architecture
      - test-webapi-infrastructure
      - coverage-report
    if: always()
    
    steps:
    - name: Check job results
      run: |
        echo "## Pipeline Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Stage | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Code Quality | ${{ needs.code-quality.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Build | ${{ needs.build.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Test - Domain.Base | ${{ needs.test-domain-base.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Test - Identification | ${{ needs.test-identification.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Test - Pagination | ${{ needs.test-pagination.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Test - Repository | ${{ needs.test-repository.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Test - Searchable | ${{ needs.test-searchable.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Test - WebApi Architecture | ${{ needs.test-webapi-architecture.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Test - WebApi Infrastructure | ${{ needs.test-webapi-infrastructure.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Coverage Report | ${{ needs.coverage-report.result }} |" >> $GITHUB_STEP_SUMMARY
        
    - name: Report status
      run: |
        if [[ "${{ needs.code-quality.result }}" == "failure" ]] || \
           [[ "${{ needs.build.result }}" == "failure" ]] || \
           [[ "${{ needs.test-domain-base.result }}" == "failure" ]] || \
           [[ "${{ needs.test-identification.result }}" == "failure" ]] || \
           [[ "${{ needs.test-pagination.result }}" == "failure" ]] || \
           [[ "${{ needs.test-repository.result }}" == "failure" ]] || \
           [[ "${{ needs.test-searchable.result }}" == "failure" ]] || \
           [[ "${{ needs.test-webapi-architecture.result }}" == "failure" ]] || \
           [[ "${{ needs.test-webapi-infrastructure.result }}" == "failure" ]]; then
          echo "❌ Pipeline failed!"
          exit 1
        else
          echo "✅ Pipeline succeeded!"
        fi
